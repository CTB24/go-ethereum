// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package catalyst

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*executableDataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e executableData) MarshalJSON() ([]byte, error) {
	type executableData struct {
		BlockHash    common.Hash     `json:"blockHash"`
		ParentHash   common.Hash     `json:"parentHash"`
		Miner        common.Address  `json:"miner"`
		StateRoot    common.Hash     `json:"stateRoot"`
		Number       hexutil.Uint64  `json:"number"`
		GasLimit     hexutil.Uint64  `json:"gasLimit"`
		GasUsed      hexutil.Uint64  `json:"gasUsed"`
		Timestamp    hexutil.Uint64  `json:"timestamp"`
		ReceiptRoot  common.Hash     `json:"receiptsRoot"`
		LogsBloom    hexutil.Bytes   `json:"logsBloom"`
		Transactions []hexutil.Bytes `json:"transactions"`
	}
	var enc executableData
	enc.BlockHash = e.BlockHash
	enc.ParentHash = e.ParentHash
	enc.Miner = e.Miner
	enc.StateRoot = e.StateRoot
	enc.Number = hexutil.Uint64(e.Number)
	enc.GasLimit = hexutil.Uint64(e.GasLimit)
	enc.GasUsed = hexutil.Uint64(e.GasUsed)
	enc.Timestamp = hexutil.Uint64(e.Timestamp)
	enc.ReceiptRoot = e.ReceiptRoot
	enc.LogsBloom = e.LogsBloom
	if e.Transactions != nil {
		enc.Transactions = make([]hexutil.Bytes, len(e.Transactions))
		for k, v := range e.Transactions {
			enc.Transactions[k] = v
		}
	}
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *executableData) UnmarshalJSON(input []byte) error {
	type executableData struct {
		BlockHash    *common.Hash    `json:"blockHash"`
		ParentHash   *common.Hash    `json:"parentHash"`
		Miner        *common.Address `json:"miner"`
		StateRoot    *common.Hash    `json:"stateRoot"`
		Number       *hexutil.Uint64 `json:"number"`
		GasLimit     *hexutil.Uint64 `json:"gasLimit"`
		GasUsed      *hexutil.Uint64 `json:"gasUsed"`
		Timestamp    *hexutil.Uint64 `json:"timestamp"`
		ReceiptRoot  *common.Hash    `json:"receiptsRoot"`
		LogsBloom    *hexutil.Bytes  `json:"logsBloom"`
		Transactions []hexutil.Bytes `json:"transactions"`
	}
	var dec executableData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockHash != nil {
		e.BlockHash = *dec.BlockHash
	}
	if dec.ParentHash != nil {
		e.ParentHash = *dec.ParentHash
	}
	if dec.Miner != nil {
		e.Miner = *dec.Miner
	}
	if dec.StateRoot != nil {
		e.StateRoot = *dec.StateRoot
	}
	if dec.Number != nil {
		e.Number = uint64(*dec.Number)
	}
	if dec.GasLimit != nil {
		e.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.GasUsed != nil {
		e.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Timestamp != nil {
		e.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.ReceiptRoot != nil {
		e.ReceiptRoot = *dec.ReceiptRoot
	}
	if dec.LogsBloom != nil {
		e.LogsBloom = *dec.LogsBloom
	}
	if dec.Transactions != nil {
		e.Transactions = make([][]byte, len(dec.Transactions))
		for k, v := range dec.Transactions {
			e.Transactions[k] = v
		}
	}
	return nil
}
